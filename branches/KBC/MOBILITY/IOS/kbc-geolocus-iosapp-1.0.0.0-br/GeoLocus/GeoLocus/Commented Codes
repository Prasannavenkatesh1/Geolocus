func locationManager(manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {


  let newLocation:CLLocation! = locations.last;
  var oldLocation:CLLocation!
  if (locations.count > 1) {
  oldLocation = locations[locations.count - 2];
  }

  //    CLGeocoder().reverseGeocodeLocation(newLocation) { (placemarks, error) -> Void in
  //      if error == nil && placemarks!.count > 0 {
  //        let location = placemarks![0]
  ////        print("\(location.ISOcountryCode)")
  //        self.timezoneid! = location.ISOcountryCode!
  //      }
  //    }

  let coord = newLocation.coordinate

  let mainDelegate:AppDelegateSwift = UIApplication.sharedApplication().delegate as! AppDelegateSwift

  print(coord.latitude)
  print(coord.longitude)
  print(newLocation.speed)

  // Reteiving the datausage within this speed
  let datausagedict:Dictionary = Datausage.getDatas()
  print("datausagedict :%@",datausagedict)

  if currentCountForDataUsageCalc == 2 {
  self.calculateDataUsage()
  currentCountForDataUsageCalc = 1
  dataUsageArray?.removeAtIndex(0)
  }

  if currentCountForDataUsageCalc < 2 {

  print("array :%@",dataUsageArray)
  dataUsageArray!.append(datausagedict)
  if let currentCount = currentCountForDataUsageCalc {
  currentCountForDataUsageCalc = currentCount + 1
  }
  }

  let latitude:Double = coord.latitude
  let longitude:Double = coord.longitude


  //Calculation for autotrip detection
  locSpeedArray!.append(String(format:"%.2f", newLocation.speed * 3.6))

  var newlocspeed:Float = 0.0
  var newlocsum:Float = 0.0

  for i in 0..<locSpeedArray!.count{
  newlocsum += Float(locSpeedArray![i])!
  }
  print("newlocsum = \(newlocsum)")

  if(locSpeedArray!.count == 5){
  newlocspeed = newlocsum / Float(locSpeedArray!.count)
  locSpeedArray!.removeAll();
  }
  self.motiontype = ""

  //    if(newLocation.speed * 3.6 <= 2.8 || newLocation.coordinate.latitude == oldLocation.coordinate.latitude && newLocation.coordinate.longitude == oldLocation.coordinate.longitude){
  //      //motion type not moving
  //      self.motiontype = StringConstants.MOTIONTYPE_NOTMOVING
  //
  //    }

  if(newlocspeed >= configmodel?.thresholds_autotrip as! Float){//if(newlocspeed >= 7.0){
  // motion ype automotive
  self.motiontype = StringConstants.MOTIONTYPE_AUTOMOTIVE
  if ((hasBeenRun == nil)) // hasBeenRun is a boolean intance variable
  {
  NSObject.cancelPreviousPerformRequestsWithTarget(self, selector: "notMoving", object: nil)
  hasBeenRun = true;
  }
  }

  //Auto trip start
  if(self.motiontype == StringConstants.MOTIONTYPE_AUTOMOTIVE && self.autoStartState == false && mainDelegate.globalAutoTrip == true) {
  self.autoStartState = true
  mainDelegate.globalAutoTrip = false
  startdate = newLocation.timestamp
  TripNotify.init(title: "Do you want to start the trip",
  UUID: NSUUID().UUIDString,
  schedule: NSDate(),
  tripstatus: true)

  //Data Usage
  finalDataUsageArray?.removeAll(keepCapacity: true)

  }

  //Auto trip stop
  if(self.motiontype == StringConstants.MOTIONTYPE_NOTMOVING){
  // stop the trip
  if (hasBeenRun == true) // hasBeenRun is a boolean instance variable
  {
  hasBeenRun = false;
  enddate = newLocation.timestamp
  self.performSelector("notMoving", withObject: nil, afterDelay: 900)
  }

  let tempDataUsageArray = finalDataUsageArray
  var dataUsageFinalValue : Int = 0
  if let tempDataUsageArr = tempDataUsageArray {
  if let thresholdValue = tempDataUsageArray?.first {
  for var i = 1; i < tempDataUsageArr.count; i++ {
  let dataUsageDifference = (tempDataUsageArr[i] as! Int) - (thresholdValue as! Int)
  if dataUsageDifference > 0 {
  dataUsageFinalValue = dataUsageFinalValue + dataUsageDifference
  }
  }
  }
  }
  }

  //********************End auto trip detection

  //Calculate time interval based on location change
  var timeElapsed:NSTimeInterval!

  if(oldLocation != nil){
  timeElapsed = newLocation.timestamp.timeIntervalSinceDate(oldLocation.timestamp)
  }else
  {
  timeElapsed = 1.0
  }

  //Speed Difference
  var speedDifference:Double = 0.0
  if (oldLocation != nil) {
  //Speed difference
  let oldSpeed:Double = oldLocation.speed;
  let newSpeed:Double = newLocation.speed;
  speedDifference = (newSpeed - oldSpeed) * 3.6;
  }

  var eventval:Double = 0.0

  //Calculate Braking
  var brakingvalue:Double = 0.0
  var braking:String = String(format:"%.1f",0.0) as String
  speedArray!.append(String(format: "%.2f", newLocation.speed * 3.6))

  if(speedArray!.count == 10){
  speedArray!.removeAll()
  }

  brakingvalue = fabs(speedDifference)

  var avgSum:Float = 0.0
  if (speedDifference < 0)
  {

  var sumForBraking:Float = 0.0
  for i in 0..<speedArray!.count{
  sumForBraking += Float(speedArray![i])!
  }

  avgSum = Float(sumForBraking) / Float(speedArray!.count);

  if (brakingvalue > configmodel?.thresholds_brake as! Double) {//      if (brakingvalue > 7.0) {
  //        if (avgSum > 30.0 && brakAlert == true) {

  eventtypes = Events.EventType.BRAKING
  eventval = brakingvalue
  braking = String(format: "%f", brakingvalue)
  brakAlert = false;

  //        }
  }
  }else{
  brakAlert = true
  }

  // Calculate Acceleration
  var acceleration:Double = 0.0
  var accele:String = ""
  accele = String(format: "%.1f", 0.0)

  if(speedDifference > 0){
  acceleration = Double(speedDifference) / Double(timeElapsed)

  var avgSpeed:Float = 0.0;
  var sum:Float = 0;
  for i in 0..<speedArray!.count{
  sum += Float(speedArray![i])!
  }

  avgSpeed = Float(sum)/Float(speedArray!.count)
  print("average speed\(avgSpeed)")

  if (acceleration > configmodel?.thresholds_acceleration as! Double) {
  //        if (avgSpeed > 35.0 && acclAlert == true){

  eventtypes = Events.EventType.ACCELERATION
  eventval = acceleration
  accele = String(format: "%f", acceleration)
  acclAlert = false

  //        }
  }
  }else
  {
  acclAlert = true
  }

  //Calculate Over Speed
  var speedValue = "0.0"

  if (newLocation.speed * 3.6 >=  Double(mainDelegate.speedLimit)) {
  //      speedValue = [NSString stringWithFormat:@"%.1f", newLocation.speed*3.6f];
  speedValue = String(format: "%.1", newLocation.speed*3.6)
  }

  //Calculate distance
  if(newLocation != nil && oldLocation != nil){
  fltDistanceTravelled? += self.getDistanceInKm(newLocation, oldLocation: oldLocation)
  distance = fltDistanceTravelled

  var defaults:NSUserDefaults = NSUserDefaults.standardUserDefaults()
  defaults.setDouble(fltDistanceTravelled!, forKey: "distanceTravelled")
  }else
  {
  distance = 0.0;
  }

  //Update to DB

  //    /*    Testing

  //    testing(latitude, longitude: longitude, newLocation: newLocation)

  //*/

  //     let tseries:TimeSeriesModel = TimeSeriesModel.init(ctime: newLocation.timestamp,
  //      lat: latitude,
  //      longt: longitude,
  //      speedval: newLocation.speed*3.6,
  //      datausage: 0,
  //      iseventval: NSNumber(integer: iseventval),
  //      evetype: NSNumber(integer: eventtypes!.rawValue),
  //      eveval: NSNumber(double: eventval),
  //      distance: distance!)
  //
  //      FacadeLayer.sharedinstance.dbactions.saveTimeSeries(tseries)

}